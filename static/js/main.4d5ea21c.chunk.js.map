{"version":3,"sources":["store/modules/core/plain/types.ts","store/helpers/functions.ts","store/modules/main/thunk/types.ts","store/modules/main/plain/types.ts","store/modules/core/plain/actions.ts","store/modules/core/thunk/abstract-actions.ts","store/helpers/createActions.ts","store/modules/main/plain/actions.ts","store/modules/main/thunk/fetch-actions.ts","store/modules/main/plain/selectors.ts","components/MainForm.tsx","store/modules/main/thunk/basic-actions.ts","components/Question.tsx","components/elements/Timer.tsx","components/Questionnaire.tsx","components/elements/Copyright.tsx","components/modals/Modal.tsx","components/Layout.tsx","App.tsx","reportWebVitals.ts","libs/reStore/reStoreBuilder.ts","store/modules/core/plain/reducer.ts","store/modules/main/plain/reducer.ts","store/index.ts","index.tsx"],"names":["ActionTypes","ThunkTypes","resolveDynamicRequestType","originalType","target","setRequestSuccess","payload","type","SET_REQUEST_SUCCESS","setRequestFailed","SET_REQUEST_FAILED","processApiRequest","actionType","requestConfig","initHook","successHook","errorHook","finalHook","wrappers","method","path","axiosConfig","start","Date","getTime","dispatch","getState","state","axios","defaults","baseURL","timeout","setRequestInitiatedThunk","resolveWrappersArray","toLowerCase","then","data","end","setRequestSuccessThunk","time","duration","request","catch","err","setRequestFailedThunk","finally","originalAction","SET_REQUEST_INITIATED","createBasicThunkAction","action","_","isEmpty","wrapper","init","success","error","final","createFetchThunkAction","config","hooks","a","setQuestion","SET_QUESTION","openModal","OPEN_MODAL","resetQuestionnaire","RESET_QUESTIONNAIRE","getTriviaCategories","GET_CATEGORIES","res","trivia_categories","SET_CATEGORIES","response","fetchQuestions","FETCH_QUESTIONS","params","results","SET_QUESTIONS","SET_STEP","setStep","selectReducer","main","selectQuestions","createSelector","questions","selectStep","step","selectQuestion","question","selectCurrentQuestion","q","selectIsLastQuestion","length","selectQuestionsLength","selectModal","modal","selectQuestionnaire","questionnaire","selectCategories","categories","isFormSubmitted","submitted","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","MainForm","useDispatch","classes","useState","amount","setAmount","category","setCat","difficulty","setDifficulty","setType","useSelector","Typography","variant","component","FormControl","className","InputLabel","id","Select","labelId","value","onChange","event","MenuItem","disabled","e","map","cat","index","name","Button","onClick","saveQuestion","SAVE_QUESTION","qId","isAnswerCorrect","correct_answer","SAVE_RESPONSE","saveResponse","answer","win","Question","RESET","allVariants","useMemo","incorrect_answers","handleChosen","useCallback","Fragment","FormLabel","RadioGroup","item","FormControlLabel","control","Radio","label","Timer","counter","setCounter","useEffect","timer","setInterval","tile","content","withoutClose","clearInterval","toISOString","substr","Questionnaire","isSubmitted","currentQuestion","isLastQuestions","questionL","score","handleNavigation","color","SET_SUBMITTED","title","Copyright","align","Link","href","getFullYear","Modal","open","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","CLOSE_MODAL","appBar","position","layout","width","marginLeft","marginRight","breakpoints","up","paper","marginBottom","padding","stepper","buttons","display","justifyContent","button","Layout","CssBaseline","AppBar","Toolbar","noWrap","Paper","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReSoreBuilder","store","middlewares","enhancer","withEnhancer","rootReducer","reducers","this","createStoreEnhancer","createRootReducer","createStore","reducer","console","warn","combineReducers","getReducers","getComposeEnhancer","composeEnhancer","applyMiddleware","key","resolveReducer","produce","draftState","compose","initialState","test","requests","stats","initiated","failed","canceled","logs","responses","storeBuilder","addMiddlewares","thunk","addReducer","TEST","url","push","SET_REQUEST_CANCELLED","getStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d5ea21c.chunk.js","sourcesContent":["import {PlainAction} from \"../../../../libs/reStore\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {ISetRequestThunkAction} from \"../../../interfaces/thunkTypes\";\r\n\r\n\r\n/**\r\n * STATE INTERFACE\r\n */\r\nexport interface IState {\r\n    test: any,\r\n\r\n    requests: {\r\n        stats: {\r\n            initiated: number;\r\n            success: number;\r\n            failed: number;\r\n            canceled: number;\r\n        },\r\n        logs: {\r\n            success: { [key: string]: { time: {}, request: AxiosResponse }[] };\r\n            failed: { [key: string]: { time: {}, request: AxiosResponse }[] };\r\n            canceled: { [key: string]: { time: {}, request: AxiosResponse }[] };\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * ACTION TYPES\r\n */\r\nexport enum ActionTypes {\r\n    TEST = 'core/TEST',\r\n\r\n    SET_REQUEST_INITIATED = 'core/SET_REQUEST_INITIATED',\r\n    SET_REQUEST_SUCCESS = 'core/SET_REQUEST_SUCCESS',\r\n    SET_REQUEST_FAILED = 'core/SET_REQUEST_FAILED',\r\n    SET_REQUEST_CANCELLED = 'core/SET_REQUEST_CANCELLED',\r\n    SET_REQUEST_FINAL = 'core/SET_REQUEST_FINAL'\r\n}\r\n\r\n\r\n/**\r\n * PLAIN ACTIONS\r\n */\r\n\r\nexport type ITestAction = PlainAction<ActionTypes.TEST, any>\r\n\r\nexport type SetRequestInitiatedAction = PlainAction<ActionTypes.SET_REQUEST_INITIATED, { type: string }>\r\nexport type SetRequestSuccessAction = PlainAction<ActionTypes.SET_REQUEST_SUCCESS, ISetRequestThunkAction>\r\nexport type SetRequestFailedAction = PlainAction<ActionTypes.SET_REQUEST_FAILED, ISetRequestThunkAction>\r\nexport type SetRequestCancelledAction = PlainAction<ActionTypes.SET_REQUEST_CANCELLED, ISetRequestThunkAction>\r\n\r\nexport type SetDynamicRequestActionInit = PlainAction<string, null>\r\n\r\n/**\r\n * Create an UNION type as PlainActions\r\n */\r\nexport type PlainActions = ITestAction\r\n    | SetRequestInitiatedAction\r\n    | SetRequestSuccessAction\r\n    | SetRequestFailedAction\r\n    | SetRequestCancelledAction\r\n    | SetDynamicRequestActionInit\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const resolveDynamicRequestType = (originalType: string, target: 'INIT' | 'SUCCESS' | 'FAILED' | 'CANCELED') => {\r\n    return `${originalType}_REQ_${target}`\r\n}\r\n","/**\r\n * THUNK TYPES\r\n */\r\nimport {BasicThunkAction, FetchThunkAction} from \"../../../../libs/reStore/interfaces\";\r\nimport {IQuestion, ITriviaCategory, QuestionDifficulty, QuestionType} from \"../../../../interfaces\";\r\n\r\nexport enum ThunkTypes {\r\n    GET_CATEGORIES = 'main/thunk/GET_CATEGORIES',\r\n    FETCH_QUESTIONS = 'main/thunk/FETCH_QUESTIONS',\r\n    SAVE_QUESTION = 'main/thunk/SAVE_QUESTION',\r\n    RESET = 'main/thunk/RESET'\r\n}\r\n\r\n\r\n/**\r\n * THUNK ACTION TYPES\r\n */\r\nexport type GetCategoriesThunk = FetchThunkAction<ThunkTypes.GET_CATEGORIES, null, { trivia_categories: ITriviaCategory[] }>\r\nexport type FetchQuestionsThunk = FetchThunkAction<ThunkTypes, { amount: number, difficulty?: QuestionDifficulty, type?: QuestionType, category?: number }, { response_code: number, results: IQuestion[] }>\r\nexport type SaveQuestionThunk = BasicThunkAction<ThunkTypes.SAVE_QUESTION, string, void>\r\nexport type ResetQuestionnaireThunk = BasicThunkAction<ThunkTypes.RESET, null, void>\r\n\r\n\r\n/**\r\n * Create an UNION action types as ThunkActions\r\n */\r\nexport type ThunkActions =\r\n    | GetCategoriesThunk\r\n    | FetchQuestionsThunk\r\n    | ResetQuestionnaireThunk\r\n","/**\r\n * STATE INTERFACE\r\n */\r\nimport {PlainAction} from \"../../../../libs/reStore\";\r\nimport {IQuestion, ITriviaCategory} from \"../../../../interfaces\";\r\n\r\n\r\nexport interface IState {\r\n    questions: IQuestion[]\r\n    step: number\r\n    question: number\r\n\r\n    submitted: boolean\r\n\r\n    categories: ITriviaCategory[]\r\n\r\n    questionnaire: {\r\n        responses: { id: { answer: boolean, win: boolean } } | {}\r\n        score: number\r\n    },\r\n\r\n    modal: {\r\n        open: boolean\r\n        title: string\r\n        content: string\r\n    }\r\n}\r\n\r\n/**\r\n * PLAIN TYPES\r\n */\r\nexport enum ActionTypes {\r\n    SET_QUESTIONS = 'main/SET_QUESTIONS',\r\n\r\n    SET_STEP = 'main/SET_STEP',\r\n    SET_QUESTION = 'main/SET_QUESTION',\r\n\r\n    SAVE_RESPONSE = 'main/SAVE_RESPONSE',\r\n\r\n    OPEN_MODAL = 'main/OPEN_MODAL',\r\n    CLOSE_MODAL = 'main/CLOSE_MODAL',\r\n\r\n    RESET_QUESTIONNAIRE = 'main/RESET_QUESTIONNAIRE',\r\n\r\n    SET_CATEGORIES = 'main/SET_CATEGORIES',\r\n\r\n    SET_SUBMITTED = 'main/SET_SUBMITTED'\r\n}\r\n\r\n/**\r\n * PLAIN ACTION TYPES\r\n */\r\n\r\nexport type ISetQuestionsAction = PlainAction<ActionTypes.SET_QUESTIONS, IQuestion[]>\r\nexport type ISetStepAction = PlainAction<ActionTypes.SET_STEP, number>\r\nexport type ISetQuestion = PlainAction<ActionTypes.SET_QUESTION, number>\r\nexport type ISaveResponse = PlainAction<ActionTypes.SAVE_RESPONSE, { qId: number, answer: string, win: boolean }>\r\nexport type IOpenModal = PlainAction<ActionTypes.OPEN_MODAL, { title: string, content: string, withoutClose?: boolean }>\r\nexport type ICloseModal = PlainAction<ActionTypes.CLOSE_MODAL, null>\r\nexport type IResetQuestionnaire = PlainAction<ActionTypes.RESET_QUESTIONNAIRE, null>\r\nexport type ISetCategories = PlainAction<ActionTypes.SET_CATEGORIES, ITriviaCategory[]>\r\nexport type ISetSubmitted = PlainAction<ActionTypes.SET_SUBMITTED, null>\r\n\r\n/**\r\n * Create an UNION action types as PlainActions\r\n */\r\nexport type PlainActions =\r\n    | ISetQuestionsAction\r\n    | ISetStepAction\r\n    | ISetQuestion\r\n    | ISaveResponse\r\n    | IOpenModal\r\n    | ICloseModal\r\n    | IResetQuestionnaire\r\n    | ISetCategories\r\n    | ISetSubmitted\r\n\r\n\r\n","import {\r\n    ActionTypes,\r\n    ITestAction,\r\n    SetRequestCancelledAction,\r\n    SetRequestFailedAction,\r\n    SetRequestInitiatedAction,\r\n    SetRequestSuccessAction\r\n} from \"./types\";\r\nimport {PlainAction} from \"../../../../libs/reStore\";\r\nimport { resolveDynamicRequestType} from \"../../../helpers/functions\";\r\n\r\n/**\r\n * ACTIONS CREATORS\r\n */\r\n\r\n\r\nconst createPlainAction = <A extends PlainAction<any, any>>(\r\n    action: (payload: A['payload']) => ({ type: A['type'], payload: A['payload'] })\r\n) => action\r\n\r\n\r\nexport const testAction = (value: any): ITestAction => ({\r\n    type: ActionTypes.TEST,\r\n    payload: value\r\n})\r\n\r\nexport const setRequestInitiated = (): SetRequestInitiatedAction => ({\r\n    type: ActionTypes.SET_REQUEST_INITIATED,\r\n});\r\n\r\nexport const setRequestSuccess = createPlainAction<SetRequestSuccessAction>(\r\n    (payload) => ({\r\n        type: ActionTypes.SET_REQUEST_SUCCESS,\r\n        payload\r\n    })\r\n)\r\n\r\nexport const setRequestFailed = createPlainAction<SetRequestFailedAction>(\r\n    (payload) => ({\r\n        type: ActionTypes.SET_REQUEST_FAILED,\r\n        payload\r\n    })\r\n)\r\n\r\nexport const setRequestCancelled = createPlainAction<SetRequestCancelledAction>(\r\n    (payload) => ({\r\n        type: ActionTypes.SET_REQUEST_CANCELLED,\r\n        payload\r\n    })\r\n)\r\n\r\nexport const setDynamicRequestActionInit = (actionName: string) => ({\r\n    type: resolveDynamicRequestType(actionName, 'INIT'),\r\n});\r\n\r\nexport const setDynamicRequestActionSuccess = (actionName: string) => ({\r\n    type: resolveDynamicRequestType(actionName, 'SUCCESS'),\r\n});\r\n\r\nexport const setDynamicRequestActionError = (actionName: string) => ({\r\n    type: resolveDynamicRequestType(actionName, 'FAILED'),\r\n});\r\n\r\nexport const setDynamicRequestActionCanceled = (actionName: string) => ({\r\n    type: resolveDynamicRequestType(actionName, 'CANCELED')\r\n})\r\n","import axios from \"axios\";\r\nimport {\r\n    ProcessApiRequestThunkAction,\r\n    SetRequestFailedThunkAction,\r\n    SetRequestInitiatedThunkAction,\r\n    SetRequestSuccessThunkAction\r\n} from \"./types\";\r\nimport {IRootState, RootActions} from \"../../../index\";\r\nimport {createAbstractThunkAction} from \"../../../helpers/createAbstractThunkAction\";\r\nimport {resolveWrappersArray} from \"../../../helpers/createActions\";\r\nimport {\r\n    setDynamicRequestActionCanceled,\r\n    setDynamicRequestActionError,\r\n    setDynamicRequestActionInit,\r\n    setDynamicRequestActionSuccess,\r\n    setRequestCancelled,\r\n    setRequestFailed,\r\n    setRequestInitiated,\r\n    setRequestSuccess\r\n} from \"../plain/actions\";\r\n\r\nexport const processApiRequest = createAbstractThunkAction<ProcessApiRequestThunkAction, IRootState, RootActions>(\r\n    (payload) => {\r\n        const {\r\n            actionType,\r\n            requestConfig,\r\n            initHook,\r\n            successHook,\r\n            errorHook,\r\n            finalHook,\r\n            wrappers\r\n        } = payload\r\n        const {method, path, axiosConfig} = requestConfig;\r\n\r\n        const start = new Date().getTime()\r\n\r\n        return (dispatch, getState) => {\r\n            const state = getState()\r\n\r\n            /*\r\n            APPLY AXIOS DEFAULT CONFIG\r\n             */\r\n            axios.defaults.baseURL = 'https://opentdb.com/'\r\n            axios.defaults.timeout = 20000\r\n\r\n            dispatch(setRequestInitiatedThunk(actionType))\r\n\r\n            if (initHook) initHook(dispatch, state)\r\n            resolveWrappersArray(wrappers, 'init')\r\n\r\n            return axios[method.toLowerCase()](path, axiosConfig)\r\n                .then(data => {\r\n                    const end = new Date().getTime()\r\n                    const duration = end - start\r\n                    dispatch(setRequestSuccessThunk({type: actionType, time: {start, end, duration}, request: data}))\r\n                    if (successHook) successHook(data, dispatch, state)\r\n                    resolveWrappersArray(wrappers, 'success')\r\n                })\r\n\r\n                .catch(err => {\r\n                    const end = new Date().getTime()\r\n                    const duration = end - start\r\n                    dispatch(setRequestFailedThunk({type: actionType, time: {start, end, duration}, request: err}))\r\n                    if (errorHook) errorHook(err, dispatch, state)\r\n                    resolveWrappersArray(wrappers, 'error')\r\n                })\r\n                .finally(() => {\r\n                        if (finalHook) finalHook(dispatch, state)\r\n                        resolveWrappersArray(wrappers, 'final')\r\n                    }\r\n                )\r\n        }\r\n    })\r\n\r\n\r\nexport const setRequestInitiatedThunk = createAbstractThunkAction<SetRequestInitiatedThunkAction, IRootState, RootActions>(\r\n    (originalAction) => dispatch => {\r\n        dispatch(setRequestInitiated())\r\n        dispatch(setDynamicRequestActionInit(originalAction))\r\n    }\r\n)\r\n\r\nexport const setRequestSuccessThunk = createAbstractThunkAction<SetRequestSuccessThunkAction, IRootState, RootActions>(\r\n    ({type, time, request}) => dispatch => {\r\n        dispatch(setRequestSuccess({type, time, request}))\r\n        dispatch(setDynamicRequestActionSuccess(type))\r\n    }\r\n)\r\n\r\nexport const setRequestFailedThunk = createAbstractThunkAction<SetRequestFailedThunkAction, IRootState, RootActions>(\r\n    ({type, time, request}) => dispatch => {\r\n        dispatch(setRequestFailed({type, time, request}))\r\n        dispatch(setDynamicRequestActionError(type))\r\n    }\r\n)\r\n\r\nexport const setRequestCanceledThunk = createAbstractThunkAction<SetRequestFailedThunkAction, IRootState, RootActions>(\r\n    ({type, time, request}) => dispatch => {\r\n        dispatch(setRequestCancelled({type, time, request}))\r\n        dispatch(setDynamicRequestActionCanceled(type))\r\n    }\r\n)\r\n\r\n","import {BasicThunkAction} from \"../../libs/reStore\";\r\nimport {Action} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {CreateFetchThunkActionHooks, IApiRequestConfig} from \"../interfaces/processApiRequestParams\";\r\nimport {processApiRequest} from \"../modules/core/thunk/abstract-actions\";\r\nimport {AxiosPromise} from \"axios\";\r\nimport _ from 'lodash'\r\n\r\nexport const createBasicThunkAction = <T extends BasicThunkAction<any, any, any>, S, A extends Action>\r\n(\r\n    type: T[\"type\"],\r\n    action: (payload?: T['payload']) => ThunkAction<T[\"response\"], S, undefined, A>\r\n): (payload?: T['payload']) => ThunkAction<T['response'], S, undefined, A> => {\r\n    return (payload?) => (dispatch, getState) => {\r\n        // @ts-ignore\r\n        dispatch({type})\r\n        return dispatch(action(payload))\r\n    }\r\n}\r\n\r\nexport interface WrapperHooks {\r\n    init?: () => void\r\n    success?: () => void\r\n    error?: () => void\r\n    final?: () => void\r\n}\r\n\r\nexport type CreateWrapper = (CreateWrapperParams) => WrapperHooks\r\n\r\nexport const createWrapper: CreateWrapper = (hooks) => hooks\r\n\r\n\r\nexport const resolveWrappersArray = (wrappers: WrapperHooks[], target: 'init' | 'success' | 'error' | 'final') => {\r\n\r\n    if (!_.isEmpty(wrappers))\r\n        for (const wrapper of wrappers) {\r\n            if (target === 'init' && wrapper.init) wrapper.init()\r\n            if (target === 'success' && wrapper.success) wrapper.success()\r\n            if (target === 'error' && wrapper.error) wrapper.error()\r\n            if (target === 'final' && wrapper.final) wrapper.final()\r\n        }\r\n}\r\n\r\n\r\nexport const createFetchThunkAction = <T extends BasicThunkAction<any, any, any>, S, A extends Action>\r\n(\r\n    type: T['type'],\r\n    config: (payload: T['payload']) => IApiRequestConfig<T['payload']>,\r\n    hooks?: CreateFetchThunkActionHooks<S, A, T['response']>,\r\n    wrappers?: WrapperHooks[]\r\n): (payload?: T['payload']) => ThunkAction<AxiosPromise, S, undefined, A> => {\r\n\r\n    const {init, success, error, final} = hooks\r\n\r\n    // @ts-ignore\r\n    return (payload?: T['payload']) => {\r\n        return async (dispatch) => {\r\n            // @ts-ignore\r\n            return dispatch(processApiRequest({\r\n                actionType: type,\r\n                requestConfig: config(payload),\r\n                initHook: init,\r\n                successHook: success,\r\n                errorHook: error,\r\n                finalHook: final,\r\n                wrappers\r\n            }))\r\n        }\r\n    }\r\n}\r\n","import {\r\n    ActionTypes,\r\n    ICloseModal,\r\n    IOpenModal,\r\n    IResetQuestionnaire,\r\n    ISaveResponse, ISetCategories,\r\n    ISetQuestion,\r\n    ISetQuestionsAction,\r\n    ISetStepAction, ISetSubmitted\r\n} from \"./types\";\r\nimport {IQuestion} from \"../../../../interfaces\";\r\n\r\n/**\r\n * ACTION CREATORS\r\n */\r\n\r\nexport const setQuestions = (payload: IQuestion[]): ISetQuestionsAction => ({\r\n    type: ActionTypes.SET_QUESTIONS,\r\n    payload\r\n})\r\n\r\nexport const setStep = (payload: 1 | 2): ISetStepAction => ({\r\n    type: ActionTypes.SET_STEP,\r\n    payload\r\n})\r\n\r\nexport const setQuestion = (payload: number): ISetQuestion => ({\r\n    type: ActionTypes.SET_QUESTION,\r\n    payload\r\n})\r\n\r\nexport const saveResponse = (payload): ISaveResponse => ({\r\n    type: ActionTypes.SAVE_RESPONSE,\r\n    payload\r\n})\r\n\r\nexport const openModal = (payload): IOpenModal => ({\r\n    type: ActionTypes.OPEN_MODAL,\r\n    payload\r\n})\r\n\r\nexport const closeModal = (): ICloseModal => ({\r\n    type: ActionTypes.CLOSE_MODAL\r\n})\r\n\r\nexport const resetQuestionnaire = (): IResetQuestionnaire => ({\r\n    type: ActionTypes.RESET_QUESTIONNAIRE\r\n})\r\n\r\nexport const setCategories = (payload): ISetCategories => ({\r\n    type: ActionTypes.SET_CATEGORIES,\r\n    payload\r\n})\r\n\r\nexport const setSubmitted = (): ISetSubmitted => ({\r\n    type: ActionTypes.SET_SUBMITTED\r\n})\r\n","import {createFetchThunkAction} from \"../../../helpers/createActions\";\r\nimport {FetchQuestionsThunk, GetCategoriesThunk, ThunkTypes} from \"./types\";\r\nimport {IRootState, RootActions} from \"../../../index\";\r\nimport {setCategories, setQuestions, setStep} from \"../plain/actions\";\r\n\r\nexport const getTriviaCategories = createFetchThunkAction<GetCategoriesThunk, IRootState, RootActions>(\r\n    ThunkTypes.GET_CATEGORIES,\r\n    (data) => ({\r\n        method: 'GET',\r\n        path: 'api_category.php',\r\n        data\r\n    }),\r\n    {\r\n        success: (res, dispatch, state) => {\r\n            dispatch(setCategories(res.data.trivia_categories))\r\n        },\r\n        error: (response) => {\r\n        }\r\n    }\r\n)\r\n\r\nexport const fetchQuestions = createFetchThunkAction<FetchQuestionsThunk, IRootState, RootActions>(\r\n    ThunkTypes.FETCH_QUESTIONS,\r\n    (params) => ({\r\n        method: 'GET',\r\n        path: 'api.php',\r\n        axiosConfig: {\r\n            params\r\n        }\r\n    }),\r\n    {\r\n        success: (res, dispatch, state) => {\r\n            dispatch(setQuestions(res.data.results))\r\n            dispatch(setStep(2))\r\n        },\r\n        error: (response) => {\r\n        }\r\n    }\r\n)\r\n\r\n","import {createSelector} from 'reselect'\r\nimport {IState} from \"./types\";\r\nimport {IRootState} from \"../../../index\";\r\n\r\nconst selectReducer = (state: IRootState): IState => state.main\r\n\r\n\r\nexport const selectQuestions = createSelector(selectReducer, main => main.questions)\r\nexport const selectStep = createSelector(selectReducer, main => main.step)\r\nexport const selectQuestion = createSelector(selectReducer, main => main.question)\r\nexport const selectCurrentQuestion = createSelector(selectQuestions, selectQuestion, (questions, q) => questions[q - 1])\r\nexport const selectIsLastQuestion = createSelector(selectQuestions, selectQuestion, (questions, q) => questions.length === q)\r\n\r\nexport const selectQuestionsLength = createSelector(selectQuestions, q => q.length)\r\n\r\nexport const selectModal = createSelector(selectReducer, main => main.modal)\r\n\r\nexport const selectQuestionnaire = createSelector(selectReducer, main => main.questionnaire)\r\n\r\nexport const selectCategories = createSelector(selectReducer, main => main.categories)\r\n\r\nexport const isFormSubmitted = createSelector(selectReducer, main => main.submitted)\r\n","import React, {FC, useState} from \"react\";\r\nimport {Button, FormControl, InputLabel, makeStyles, MenuItem, Select, Typography} from \"@material-ui/core\";\r\nimport {QuestionDifficulty, QuestionType} from \"../interfaces\";\r\nimport {fetchQuestions} from \"../store/modules/main/thunk/fetch-actions\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCategories} from \"../store/modules/main/plain/selectors\";\r\n\r\ninterface IProps {\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport const MainForm: FC<IProps> = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const classes = useStyles();\r\n\r\n    const [amount, setAmount] = useState<number>(5);\r\n\r\n    const [category, setCat] = useState<number>(0)\r\n\r\n    const [difficulty, setDifficulty] = useState<QuestionDifficulty>('easy');\r\n\r\n    const [type, setType] = useState<QuestionType>('multiple');\r\n\r\n    const categories = useSelector(selectCategories)\r\n\r\n    const handleChangeAmount = (event) => {\r\n        setAmount(event.target.value);\r\n    };\r\n\r\n    const handleChangeDifficulty = (event) => {\r\n        setDifficulty(event.target.value);\r\n    };\r\n\r\n    const handleChangeType = (event) => {\r\n        setType(event.target.value);\r\n    };\r\n\r\n    const handleChangeCat = (e) => {\r\n        setCat(e.target.value)\r\n    }\r\n\r\n    const handleGenerateQuestions = () => {\r\n        let config = {amount, difficulty, type}\r\n\r\n        if (category) { // @ts-ignore\r\n            config = {...config, category}\r\n        }\r\n\r\n        dispatch(fetchQuestions(config))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"h4\" component=\"h2\">\r\n                Config Questions\r\n            </Typography>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Amount</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={amount}\r\n                    onChange={handleChangeAmount}\r\n                >\r\n                    <MenuItem value={5}>5</MenuItem>\r\n                    <MenuItem value={10}>10</MenuItem>\r\n                    <MenuItem value={15}>15</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Difficulty</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={difficulty}\r\n                    onChange={handleChangeDifficulty}\r\n                >\r\n                    <MenuItem value='easy'>Easy</MenuItem>\r\n                    <MenuItem value='medium'>Medium</MenuItem>\r\n                    <MenuItem value='hard'>Hard</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Type</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={type}\r\n                    disabled\r\n                    onChange={handleChangeType}\r\n                >\r\n                    <MenuItem value='any'>Any</MenuItem>\r\n                    <MenuItem value='multiple'>Multiple Choice</MenuItem>\r\n                    <MenuItem value='boolean'>True / false</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Categories</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={category}\r\n                    onChange={handleChangeCat}\r\n                >\r\n                    <MenuItem value={0}>Select category</MenuItem>\r\n                    {\r\n                        categories.map((cat, index) => (\r\n                            <MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>\r\n                        ))\r\n                    }\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <div>\r\n                <Button variant=\"contained\" onClick={handleGenerateQuestions}>GENERATE\r\n                    QUESTIONS</Button>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n","import {ResetQuestionnaireThunk, SaveQuestionThunk, ThunkTypes} from \"./types\";\r\nimport {createBasicThunkAction} from \"../../../helpers/createActions\";\r\nimport {IRootState, RootActions} from \"../../../index\";\r\nimport {saveResponse} from \"../plain/actions\";\r\n\r\nexport const saveQuestion = createBasicThunkAction<SaveQuestionThunk, IRootState, RootActions>(\r\n    ThunkTypes.SAVE_QUESTION,\r\n    (payload) => (dispatch, getState) => {\r\n\r\n        const state = getState()\r\n\r\n        const qId = state.main.question - 1\r\n\r\n        const currentQ = state.main.questions[qId]\r\n\r\n        const isAnswerCorrect = currentQ.correct_answer === payload\r\n\r\n        dispatch(saveResponse({qId, answer: payload, win: !!isAnswerCorrect}))\r\n    }\r\n)\r\n\r\nexport const resetQuestionnaire = createBasicThunkAction<ResetQuestionnaireThunk, IRootState, RootActions>(\r\n    ThunkTypes.RESET,\r\n    () => (dispatch, state) => {\r\n\r\n    }\r\n)\r\n","import React, {FC, useCallback, useMemo} from \"react\";\r\nimport {IQuestion} from \"../interfaces\";\r\nimport {FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from \"@material-ui/core\";\r\nimport {saveQuestion} from \"../store/modules/main/thunk/basic-actions\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ninterface IProps {\r\n    question: IQuestion\r\n}\r\n\r\nexport const Question: FC<IProps> = ({question}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const allVariants: string[] = useMemo(() => {\r\n        return [...question.incorrect_answers, question.correct_answer]\r\n    }, [question.incorrect_answers, question.correct_answer])\r\n\r\n    const handleChosen = useCallback((e) => {\r\n        dispatch(saveQuestion(e.target.value))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">{question.question}</FormLabel>\r\n                <br/>\r\n                <RadioGroup aria-label=\"gender\" name=\"gender1\">\r\n                    {\r\n                        allVariants.map((item, id) => (\r\n                            <FormControlLabel key={id} value={item}\r\n                                              control={<Radio onClick={handleChosen}/>}\r\n                                              label={item}/>\r\n                        ))\r\n                    }\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {openModal} from \"../../store/modules/main/plain/actions\";\r\nimport {selectQuestionsLength} from \"../../store/modules/main/plain/selectors\";\r\n\r\nexport const Timer = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const questions = useSelector(selectQuestionsLength)\r\n\r\n    const [counter, setCounter] = useState(questions * 60)\r\n\r\n    useEffect(() => {\r\n        const timer =\r\n            counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\r\n\r\n        if (!counter)\r\n            dispatch(openModal({\r\n                tile: 'TIME LIMIT REACHED',\r\n                content: 'You reached the time limit',\r\n                withoutClose: true\r\n            }))\r\n        return () => clearInterval(timer);\r\n    }, [dispatch, counter])\r\n\r\n    return (\r\n        <>\r\n            Timer {new Date(counter * 1000).toISOString().substr(11, 8)}\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, {FC} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    isFormSubmitted,\r\n    selectCurrentQuestion,\r\n    selectIsLastQuestion,\r\n    selectQuestion,\r\n    selectQuestionnaire,\r\n    selectQuestionsLength\r\n} from \"../store/modules/main/plain/selectors\";\r\nimport {Question} from \"./Question\";\r\nimport {openModal, resetQuestionnaire, setQuestion, setSubmitted} from \"../store/modules/main/plain/actions\";\r\nimport {Timer} from \"./elements/Timer\";\r\n\r\ninterface IProps {\r\n}\r\n\r\nexport const Questionnaire: FC<IProps> = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isSubmitted = useSelector(isFormSubmitted)\r\n\r\n    const currentQuestion = useSelector(selectCurrentQuestion)\r\n\r\n    const question = useSelector(selectQuestion)\r\n\r\n    const isLastQuestions = useSelector(selectIsLastQuestion)\r\n\r\n    const questionL = useSelector(selectQuestionsLength)\r\n\r\n    const {score} = useSelector(selectQuestionnaire)\r\n\r\n    const handleNavigation = (target: 'back' | 'next') => {\r\n        if (target === 'next')\r\n            dispatch(setQuestion(question + 1))\r\n        else if (target === 'back')\r\n            dispatch(setQuestion(question - 1))\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        dispatch(setSubmitted())\r\n        dispatch(openModal({\r\n            title: 'Questionnaire result',\r\n            content: `You answer correctly on ${score} from ${questionL} questions !`\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div> {!isSubmitted && <Timer/>} </div>\r\n\r\n            <br/>\r\n            <Question question={currentQuestion}/>\r\n            <br/>\r\n            <br/>\r\n            <div>\r\n                <Button variant=\"contained\" color='secondary'\r\n                        onClick={() => dispatch(resetQuestionnaire())}>RESET</Button>\r\n\r\n                <Button disabled={question === 1} variant=\"contained\"\r\n                        onClick={() => handleNavigation('back')}>BACK</Button>\r\n\r\n                <Button disabled={isLastQuestions} variant=\"contained\"\r\n                        onClick={() => handleNavigation('next')}>NEXT</Button>\r\n\r\n                <Button disabled={!isLastQuestions} variant=\"contained\" color='primary'\r\n                        onClick={handleSubmit}>SUBMIT</Button>\r\n            </div>\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Link, Typography} from \"@material-ui/core\";\r\n\r\nexport const Copyright = () => (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n        {'Copyright © '}\r\n        <Link color=\"inherit\" href=\"https://github.com/thecodedealer\">\r\n            CODE.DEALER\r\n        </Link>{' '}\r\n        {new Date().getFullYear()}\r\n        {'.'}\r\n    </Typography>\r\n);\r\n\r\n","import React, {FC} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectModal} from \"../../store/modules/main/plain/selectors\";\r\nimport {closeModal, resetQuestionnaire} from \"../../store/modules/main/plain/actions\";\r\n\r\ninterface IProps {\r\n}\r\n\r\nexport const Modal: FC<IProps> = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {open, title, content} = useSelector(selectModal)\r\n\r\n    const handleReset = () => {\r\n        dispatch(resetQuestionnaire())\r\n        dispatch(closeModal())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {content}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleReset} color=\"primary\">\r\n                        Reset\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {AppBar, CssBaseline, makeStyles, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {MainForm} from \"./MainForm\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectStep} from \"../store/modules/main/plain/selectors\";\r\nimport {Questionnaire} from \"./Questionnaire\";\r\nimport {Copyright} from \"./elements/Copyright\";\r\nimport {Modal} from \"./modals/Modal\";\r\n\r\ninterface IProps {\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    layout: {\r\n        width: 'auto',\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n            width: 600,\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(6),\r\n            marginBottom: theme.spacing(6),\r\n            padding: theme.spacing(3),\r\n        },\r\n    },\r\n    stepper: {\r\n        padding: theme.spacing(3, 0, 5),\r\n    },\r\n    buttons: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(3),\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nexport const Layout: FC<IProps> = () => {\r\n\r\n    const step = useSelector(selectStep)\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n\r\n            <Modal/>\r\n\r\n            <CssBaseline/>\r\n            <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                        TRIVIA GAME\r\n                    </Typography>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <main className={classes.layout}>\r\n                <Paper className={classes.paper}>\r\n                    {step === 1 && <MainForm/>}\r\n                    {step === 2 && <Questionnaire/>}\r\n                </Paper>\r\n                <Copyright/>\r\n            </main>\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react';\nimport {Layout} from \"./components/Layout\";\nimport {useDispatch} from \"react-redux\";\nimport {getTriviaCategories} from \"./store/modules/main/thunk/fetch-actions\";\n\nfunction App() {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getTriviaCategories())\n    }, [dispatch])\n\n    return (\n        <div>\n            <Layout/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore, Middleware, Reducer, Store, StoreEnhancer} from \"redux\";\r\nimport {produce} from 'immer'\r\n\r\n\r\nexport class ReSoreBuilder {\r\n    // @ts-ignore\r\n    private store: Store\r\n    private middlewares: Middleware[] = []\r\n    // @ts-ignore\r\n    private enhancer: StoreEnhancer\r\n    // @ts-ignore\r\n    private withEnhancer: boolean\r\n    // @ts-ignore\r\n    private rootReducer: Reducer\r\n    private reducers: { [key: string]: Reducer } = {}\r\n\r\n    public getStore(): Store {\r\n        return this.store;\r\n    }\r\n\r\n\r\n    public createStore(withEnhancer = false) {\r\n        this.withEnhancer = withEnhancer\r\n\r\n        // apply middlewares and create store enhancer\r\n        this.enhancer = this.createStoreEnhancer();\r\n\r\n        //create root reducer\r\n        this.rootReducer = this.createRootReducer()\r\n\r\n        // create redux store\r\n        this.store = createStore(this.rootReducer, this.enhancer)\r\n    }\r\n\r\n    public addReducer(name: string, reducer: Reducer) {\r\n        if (!this.reducers[name])\r\n            this.reducers[name] = reducer\r\n        else\r\n            console.warn(`${name} reducer is already added!`)\r\n    }\r\n\r\n    public addMiddlewares(...middlewares: Middleware[]) {\r\n        this.middlewares = [...this.middlewares, ...middlewares]\r\n    }\r\n\r\n    private createRootReducer(): Reducer {\r\n        return combineReducers({\r\n            ...this.getReducers(),\r\n        });\r\n    }\r\n\r\n    private createStoreEnhancer(): StoreEnhancer {\r\n        const composeEnhancer = this.getComposeEnhancer();\r\n        return composeEnhancer(applyMiddleware(...this.middlewares))\r\n    }\r\n\r\n    private getReducers() {\r\n        for (const key in this.reducers) {\r\n            this.reducers[key] = this.resolveReducer(this.reducers[key])\r\n        }\r\n        return this.reducers\r\n    }\r\n\r\n    // @ts-ignore\r\n    private resolveReducer(reducer) {\r\n        // @ts-ignore\r\n        return (state, action) => produce(state, draftState => reducer(draftState, action))\r\n    }\r\n\r\n    private getComposeEnhancer() {\r\n        // @ts-ignore\r\n        return (this.withEnhancer && process.env.NODE_ENV === 'development' && window && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\r\n            || compose;\r\n    }\r\n}\r\n","import {PlainActions, ActionTypes, IState} from \"./types\";\r\nimport {ReReducer} from \"../../../../libs/reStore\";\r\n\r\n/**\r\n * REDUCER\r\n * first define and export reducer name as reducerName\r\n * then define and export initial state as initialState\r\n * last create the reducer which will be type ReReducer<IState, PlainActions>\r\n */\r\n\r\nexport const reducerName = 'core';\r\n\r\n\r\nexport const initialState: IState = {\r\n    test: null,\r\n\r\n    requests: {\r\n        stats: {\r\n            initiated: 0,\r\n            success: 0,\r\n            failed: 0,\r\n            canceled: 0,\r\n        },\r\n        logs: {\r\n            success: {},\r\n            failed: {},\r\n            canceled: {},\r\n        },\r\n    },\r\n}\r\n\r\nexport const reducer: ReReducer<IState, PlainActions> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.TEST: {\r\n            state.test = action.payload\r\n            break\r\n        }\r\n\r\n        case ActionTypes.SET_REQUEST_INITIATED: {\r\n            ++state.requests.stats.initiated\r\n            break;\r\n        }\r\n\r\n        case ActionTypes.SET_REQUEST_SUCCESS: {\r\n            ++state.requests.stats.success\r\n\r\n            // log request\r\n            const url = action.payload.request.config.url\r\n\r\n            const item = {\r\n                time: action.payload.time,\r\n                request: action.payload.request\r\n            }\r\n\r\n            if (state.requests.logs.success[url])\r\n                state.requests.logs.success[url].push(item)\r\n            else\r\n                state.requests.logs.success[url] = [item]\r\n\r\n            break\r\n        }\r\n\r\n        case ActionTypes.SET_REQUEST_CANCELLED: {\r\n            ++state.requests.stats.canceled\r\n\r\n            // log request\r\n            const url = action.payload.request.config.url\r\n\r\n            const item = {\r\n                time: action.payload.time,\r\n                request: action.payload.request\r\n            }\r\n\r\n            if (state.requests.logs.canceled[url])\r\n                state.requests.logs.canceled[url].push(item)\r\n            else\r\n                state.requests.logs.canceled[url] = [item]\r\n            break\r\n        }\r\n\r\n        case ActionTypes.SET_REQUEST_FAILED: {\r\n            ++state.requests.stats.failed\r\n\r\n            // log request\r\n            const url = action.payload.request.config.url\r\n\r\n            const item = {\r\n                time: action.payload.time,\r\n                request: action.payload.request\r\n            }\r\n\r\n            if (state.requests.logs.failed[url])\r\n                state.requests.logs.failed[url].push(item)\r\n            else\r\n                state.requests.logs.failed[url] = [item]\r\n            break\r\n        }\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n","import {ActionTypes, IState, PlainActions} from \"./types\";\r\nimport {ReReducer} from \"../../../../libs/reStore\";\r\n\r\n/**\r\n * REDUCER\r\n * first define and export reducer name as reducerName\r\n * then define and export initial state as initialState\r\n * last create the reducer which will be type ReReducer\r\n */\r\n\r\nexport const reducerName = 'main';\r\n\r\nexport const initialState: IState = {\r\n    submitted: false,\r\n    categories: [],\r\n    questions: [],\r\n    step: 1,\r\n    question: 1,\r\n\r\n    questionnaire: {\r\n        responses: {},\r\n        score: 0\r\n    },\r\n\r\n    modal: {\r\n        open: false,\r\n        title: '',\r\n        content: ''\r\n    }\r\n}\r\n\r\nexport const reducer: ReReducer<IState, PlainActions> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.SET_QUESTIONS: {\r\n            state.questions = action.payload\r\n            break\r\n        }\r\n\r\n        case ActionTypes.SET_STEP: {\r\n            state.step = action.payload\r\n            break\r\n        }\r\n\r\n        case ActionTypes.SET_QUESTION: {\r\n            state.question = action.payload\r\n            break\r\n        }\r\n\r\n        case ActionTypes.SAVE_RESPONSE: {\r\n            const {qId, answer, win} = action.payload\r\n\r\n            const responses = state.questionnaire.responses\r\n\r\n            if (!!responses[qId] && !!responses[qId].win && !win)\r\n                state.questionnaire.score -= 1\r\n\r\n            state.questionnaire.responses[qId] = {answer, win}\r\n\r\n            if (win)\r\n                state.questionnaire.score += 1\r\n\r\n            break\r\n        }\r\n\r\n        case ActionTypes.OPEN_MODAL: {\r\n            const {title, content} = action.payload\r\n            state.modal.open = true\r\n\r\n            state.modal.title = title\r\n            state.modal.content = content\r\n\r\n            break\r\n        }\r\n\r\n        case ActionTypes.CLOSE_MODAL: {\r\n            state.modal.open = false\r\n            break\r\n        }\r\n\r\n        case ActionTypes.RESET_QUESTIONNAIRE: {\r\n            state.questions = []\r\n            state.step = 1\r\n            state.question = 1\r\n            state.submitted = false\r\n\r\n            state.questionnaire = {\r\n                responses: {},\r\n                score: 0\r\n            }\r\n\r\n            break\r\n        }\r\n\r\n        case ActionTypes.SET_CATEGORIES: {\r\n            state.categories = action.payload\r\n            break\r\n        }\r\n\r\n        case ActionTypes.SET_SUBMITTED: {\r\n            state.submitted = true\r\n            break\r\n        }\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n","import {ReSoreBuilder} from \"../libs/reStore\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport {reducer as coreReducer, reducerName as coreReducerName} from './modules/core/plain/reducer'\r\nimport {reducer as mainReducer, reducerName as mainReducerName} from './modules/main/plain/reducer'\r\nimport {IState as IMainState, PlainActions as MainActionInterfaces} from \"./modules/main/plain/types\";\r\nimport {ThunkActions as MainThunkActions} from './modules/main/thunk/types'\r\n\r\n\r\nimport {IState as ICoreState, PlainActions as CorePlainActions} from './modules/core/plain/types'\r\n\r\nexport type RootPlainActions =\r\n    | CorePlainActions\r\n    | MainActionInterfaces\r\n\r\nexport type RootThunkActions =\r\n    | MainThunkActions\r\n\r\nexport type RootActions = RootPlainActions | RootThunkActions\r\n\r\n// create root state interface\r\nexport interface IRootState {\r\n    core: ICoreState\r\n    main: IMainState\r\n}\r\n\r\nconst storeBuilder = new ReSoreBuilder()\r\n\r\n//add middlewares\r\nstoreBuilder.addMiddlewares(\r\n    thunk\r\n)\r\n\r\n// add modules\r\nstoreBuilder.addReducer(coreReducerName, coreReducer)\r\nstoreBuilder.addReducer(mainReducerName, mainReducer)\r\n\r\n\r\n// create store\r\nstoreBuilder.createStore(true)\r\n\r\n\r\n// export store builder\r\nexport {storeBuilder}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport {storeBuilder} from \"./store\";\n\nconst store = storeBuilder.getStore()\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}